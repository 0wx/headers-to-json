{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["textAreaStyle","minHeight","minWidth","backgroundColor","color","outline","margin","mainDiv","height","display","justifyContent","alignItems","button","border","borderRadius","textTransform","padding","App","useState","text","setText","style","onChange","event","isJson","JSON","parse","stringify","error","result","split","forEach","line","key","value","join","trim","e","parser","target","id","onClick","textArea","document","createElement","top","left","position","body","appendChild","focus","select","msg","execCommand","removeChild","alert","err","console","copy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mPAIMA,EAAgC,CACpCC,UAAW,OACXC,SAAU,OACVC,gBAAiB,QACjBC,MAAO,QACPC,QAAS,OACTC,OAAQ,QAGJC,EAA0B,CAC9BC,OAAQ,OACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAERC,EAAyB,CAC7BR,MAAO,UACPD,gBAAiB,cACjBU,OAAQ,oBACRC,aAAc,MACdC,cAAe,YACfC,QAAS,WACTV,OAAQ,UAsEKW,MAvBf,WAAgB,IAAD,EACWC,mBAAS,MADpB,mBACNC,EADM,KACAC,EADA,KAGb,OACE,qBAAKC,MAAOd,EAAZ,SACE,gCACE,8BACE,0BACEc,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAWH,EAtDjC,SAAgBD,GACd,IACE,IACE,IAAMK,EAASC,KAAKC,MAAMP,GAC1B,GAAIK,EAAQ,OAAOC,KAAKE,UAAUH,EAAQ,KAAM,GAChD,MAAOI,IAGT,IAAMC,EAAc,GAQpB,OAPAV,EAAKW,MAAM,MAAMC,SAAQ,SAACC,GACxB,GAAKA,EAAL,CADiC,MAEJA,EAAKF,MAAM,KAFP,iBAE1BG,EAF0B,KAG3BC,EAH2B,WAGRC,KAAK,KAC9BN,EAAOI,EAAIG,QAAUF,EAAME,WAGtBX,KAAKE,UAAUE,EAAQ,KAAM,GACpC,MAAOQ,GACP,MAAO,iBAoC8BC,CAAOf,EAAMgB,OAAOL,aAGrD,8BACE,0BAAUM,GAAG,SAASN,MAAOf,EAAME,MAAOrB,MAE5C,qBAAKqB,MAAOd,EAAZ,SACE,wBAAQc,MAAOT,EAAQ6B,QAAS,kBAvC1C,SAActB,GACZ,IAAIuB,EAAWC,SAASC,cAAc,YACtCF,EAASR,MAAQf,EAEjBuB,EAASrB,MAAMwB,IAAM,IACrBH,EAASrB,MAAMyB,KAAO,IACtBJ,EAASrB,MAAM0B,SAAW,QAE1BJ,SAASK,KAAKC,YAAYP,GAC1BA,EAASQ,QACTR,EAASS,SAET,IACE,IACMC,EADaT,SAASU,YAAY,QACf,aAAe,eACxCV,SAASK,KAAKM,YAAYZ,GAC1Ba,MAAMH,GACN,MAAOI,GACPC,QAAQ7B,MAAM4B,GACdD,MAAM,mBAoBsCG,CAAKvC,IAA3C,iCC3EKwC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,SAM1BZ,M","file":"static/js/main.ce740915.chunk.js","sourcesContent":["import { useState } from 'react'\nimport CSS from 'csstype'\nimport './App.css'\n\nconst textAreaStyle: CSS.Properties = {\n  minHeight: '15em',\n  minWidth: '15em',\n  backgroundColor: 'black',\n  color: 'white',\n  outline: 'none',\n  margin: '10px'\n}\n\nconst mainDiv: CSS.Properties = {\n  height: '100%',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n}\nconst button: CSS.Properties = {\n  color: '#0099CC',\n  backgroundColor: 'transparent',\n  border: '2px solid #0099CC',\n  borderRadius: '5px',\n  textTransform: 'uppercase',\n  padding: '5px 10px',\n  margin: '20px 0',\n}\nfunction parser(text: string): string {\n  try {\n    try {\n      const isJson = JSON.parse(text)\n      if (isJson) return JSON.stringify(isJson, null, 2)\n    } catch (error) {\n      // basically do nothing\n    }\n    const result: any = {}\n    text.split('\\n').forEach((line) => {\n      if (!line) return\n      const [key, ...splitValue] = line.split(':')\n      const value = splitValue.join(':')\n      result[key.trim()] = value.trim()\n    })\n\n    return JSON.stringify(result, null, 2)\n  } catch (e) {\n    return 'invalid input'\n  }\n}\n\nfunction copy(text: string): void {\n  let textArea = document.createElement('textarea')\n  textArea.value = text\n\n  textArea.style.top = '0'\n  textArea.style.left = '0'\n  textArea.style.position = 'fixed'\n\n  document.body.appendChild(textArea)\n  textArea.focus()\n  textArea.select()\n\n  try {\n    const successful = document.execCommand('copy')\n    const msg = successful ? 'successful' : 'unsuccessful'\n    document.body.removeChild(textArea)\n    alert(msg)\n  } catch (err) {\n    console.error(err)\n    alert('unable to copy')\n  }\n}\n\nfunction App() {\n  const [text, setText] = useState('{}')\n\n  return (\n    <div style={mainDiv}>\n      <div>\n        <div>\n          <textarea\n            style={textAreaStyle}\n            onChange={(event) => setText(parser(event.target.value))}\n          ></textarea>\n        </div>\n        <div>\n          <textarea id=\"result\" value={text} style={textAreaStyle}></textarea>\n        </div>\n        <div style={mainDiv}>\n          <button style={button} onClick={() => copy(text)}>Copy Result</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}